name: Process Issue

on:
  repository_dispatch:
    types: [process-issue]

jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Fetch issue data
        uses: actions/github-script@v6
        id: issue-data
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.client_payload.issue_number }}
            });
            const body = issue.data.body;
            const appIdMatch = body.match(/### App ID\n\n(\S+)/);
            const imageUrlMatch = body.match(/### Image URL\n\n(https\S+)/);
            const artworkTypeMatch = body.match(/### Artwork Type\n\n(Game|Software)/);
            return {
              app_id: appIdMatch ? appIdMatch[1] : '',
              image_url: imageUrlMatch ? imageUrlMatch[1] : '',
              artwork_type: artworkTypeMatch ? artworkTypeMatch[1] : ''
            };

      - name: Fetch Steam API data
        id: steam-data
        env:
          STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
        run: |
          node -e "
            const axios = require('axios');
            const fs = require('fs');
            (async () => {
              try {
                const apiKey = process.env.STEAM_API_KEY;
                const response = await axios.get('https://store.steampowered.com/api/appdetails?key=${apiKey}&appids=${{ fromJson(steps.issue-data.outputs.result).app_id }}');
                const data = response.data;
                fs.writeFileSync('steam_data.json', JSON.stringify(data));
              } catch (error) {
                console.error('Error fetching Steam API:', error.message);
                process.exit(1);
              }
            })();
          "

      - name: Validate and download image
        env:
          STEAMGRIDDB_API_KEY: ${{ secrets.STEAMGRIDDB_API_KEY }}
        run: |
            node -e "
              const axios = require('axios');
              const fs = require('fs');
              const path = require('path');
              (async () => {
                const issueNumber = ${{ github.event.client_payload.issue_number }};
                try {
                  const imageUrl = '${{ fromJson(steps.issue-data.outputs.result).image_url }}';
                  const apiKey = process.env.STEAMGRIDDB_API_KEY;
                  if (!apiKey) {
                    fs.writeFileSync('error_message.txt', 'Error: STEAMGRIDDB_API_KEY is not set');
                    console.error('Error: STEAMGRIDDB_API_KEY is not set');
                    process.exit(1);
                  }

                  const url = new URL(imageUrl);
                  const gameIdMatch = url.pathname.match(/\/hero\/(\d+)/);
                  if (!gameIdMatch || !gameIdMatch[1]) {
                    fs.writeFileSync('error_message.txt', 'Error: Invalid SteamGridDB URL format: ' + imageUrl);
                    console.error('Error: Invalid SteamGridDB URL format:', imageUrl);
                    process.exit(1);
                  }
                  const gameId = gameIdMatch[1];
                  console.log('Extracted SteamGridDB game ID:', gameId);

                  console.log('Fetching image from SteamGridDB API for game ID:', gameId);
                  const response = await axios.get('https://www.steamgriddb.com/api/v2/heroes/' + gameId, {
                    headers: { Authorization: 'Bearer ' + apiKey }
                  });
                  const imageData = response.data.data;
                  if (!response.data.success || !imageData.url) {
                    fs.writeFileSync('error_message.txt', 'Error: Invalid API response or missing image URL for game ID ' + gameId);
                    console.error('Error: Invalid API response or missing image URL');
                    process.exit(1);
                  }
                  if (imageData.style !== 'alternate') {
                    fs.writeFileSync('error_message.txt', 'Error: Image style must be Alternate, found: ' + imageData.style);
                    console.error('Error: Image style must be Alternate');
                    process.exit(1);
                  }
                  if (imageData.tags?.length > 0) {
                    fs.writeFileSync('error_message.txt', 'Error: Image must be Untagged, found tags: ' + imageData.tags.join(', '));
                    console.error('Error: Image must be Untagged');
                    process.exit(1);
                  }
                  if (imageData.animated) {
                    fs.writeFileSync('error_message.txt', 'Error: Image must be Static');
                    console.error('Error: Image must be Static');
                    process.exit(1);
                  }
                  if (imageData.width !== 3840 || imageData.height !== 1240) {
                    fs.writeFileSync('error_message.txt', 'Error: Image resolution must be 3840x1240, found: ' + imageData.width + 'x' + imageData.height);
                    console.error('Error: Image resolution must be 3840x1240');
                    process.exit(1);
                  }
                  const imageUrlFromApi = imageData.url;
                  console.log('Selected image URL:', imageUrlFromApi);

                  const extension = path.extname(new URL(imageUrlFromApi).pathname).split('?')[0] || '.png';
                  const filename = 'imageSource' + extension;
                  const imageResponse = await axios.get(imageUrlFromApi, { responseType: 'arraybuffer' });
                  fs.writeFileSync(filename, imageResponse.data);
                  console.log('Downloaded file:', filename);

                  const { execSync } = require('child_process');
                  const fileType = execSync('file ' + filename).toString();
                  if (!fileType.includes('image data')) {
                    fs.writeFileSync('error_message.txt', 'Error: Downloaded file is not a valid image');
                    console.error('Error: Downloaded file is not a valid image');
                    process.exit(1);
                  }
                  console.log('Downloaded file is a valid image:', fileType);

                  fs.writeFileSync('image_extension.txt', extension);
                } catch (error) {
                  fs.writeFileSync('error_message.txt', 'Error processing image: ' + error.message);
                  console.error('Error fetching or processing image:', error.message);
                  process.exit(1);
                }
              })();
            "

      - name: Post error comment if validation failed
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            if (fs.existsSync('error_message.txt')) {
              const errorMessage = fs.readFileSync('error_message.txt', 'utf8').trim();
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.client_payload.issue_number }},
                body: errorMessage
              });
            }

      - name: Generate HTML
        if: success()
        run: |
            node -e "
              const Mustache = require('mustache');
              const fs = require('fs');
              const path = require('path');
          
              const steamData = JSON.parse(fs.readFileSync('steam_data.json', 'utf8'));
              const extension = fs.readFileSync('image_extension.txt', 'utf8').trim();
              const appId = '${{ fromJson(steps.issue-data.outputs.result).app_id }}';
          
              if (!steamData[appId]) {
                throw new Error('Steam data missing for appId: ' + appId);
              }
          
              const data = steamData[appId].data;
              const publisherRaw = data.publishers?.[0] || 'Unknown';
              const publisher = publisherRaw.replace(/[^a-zA-Z0-9]/g, '_');
          
              const dir = path.join('artworks', publisher, appId);
              console.log('Saving to directory:', dir);
          
              if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
              }
        
              const template = fs.readFileSync('templates/index.html.mustache', 'utf8');
              const output = Mustache.render(template, {
                APP_NAME: data.name,
                APP_PUBLISHER: publisherRaw,
                APP_RELEASE: data.release_date?.date || 'Unknown',
                IMAGE_NAME: 'imageSource' + extension
              });
        
              const indexPath = path.join(dir, 'index.html');
              fs.writeFileSync(indexPath, output);
              console.log('index.html saved at:', indexPath);
        
              const originalCssPath = 'templates/original.css';
              const spacethemeCssPath = 'templates/spacetheme.css';
              if (fs.existsSync(originalCssPath)) {
                const originalcssDest = path.join(dir, 'original.css');
                const spacethemecssDest = path.join(dir, 'spacetheme.css');
                fs.copyFileSync(originalCssPath, originalcssDest);
                fs.copyFileSync(spacethemeCssPath, spacethemecssDest);
                console.log('original.css copied to:', originalcssDest);
                console.log('spacetheme.css copied to:', spacethemecssDest);
              } else {
                console.error('Error: CSS templates not found');
              }
        
              const imageFile = 'imageSource' + extension;
              if (fs.existsSync(imageFile)) {
                const imageDest = path.join(dir, 'imageSource' + extension);
                fs.renameSync(imageFile, imageDest);
                console.log('Image saved at:', imageDest);
              } else {
                console.error('Error: image file not found');
              }
        
              console.log('Files created:', fs.readdirSync(dir));
            "

      - name: Post release comment and close issue
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.client_payload.issue_number }},
              body: 'The artwork will be included in the next release. Please be patient until then.'
            });
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.client_payload.issue_number }},
              state: 'closed'
            });

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f steam_data.json imageSource.* image_extension.txt error_message.txt
          echo "Cleaned up temporary files"

      - name: Commit changes
        if: success()
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add artworks/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add artwork for app ${{ fromJson(steps.issue-data.outputs.result).app_id }}"
            git push
          fi